#########################
AUTHOR NAME: Avneet pal kour
DATE: May 8, 2018
#########################

To research about keras and its different modules, learnt from below website (keras documentation) and took the help of examples given:
https://keras.io/

-------For loading IMDB dataset-------
https://keras.io/datasets/

Example:

from keras.datasets import imdb

(x_train, y_train), (x_test, y_test) = imdb.load_data(path="imdb.npz",
                                                      num_words=None,
                                                      skip_top=0,
                                                      maxlen=None,
                                                      seed=113,
                                                      start_char=1,
                                                      oov_char=2,
                                                      index_from=3)
													  
													  
Changed the arguments according to requirement as on first instance no argument was required hence used just the function without any argumnets
On other instances ony number of words was required so passed on;y one argument num_words

--------------padding sequences-----------

pad_sequences(sequences, maxlen=None, dtype='int32', padding='pre', truncating='pre', value=0.0)

Used only two arguments (sequence and maxlen) according to requirement 

--------------Embedding-----------

keras.layers.Embedding(input_dim, output_dim, embeddings_initializer='uniform', embeddings_regularizer=None, activity_regularizer=None, embeddings_constraint=None, mask_zero=False, input_length=None

Passed only 3 arguments 

-------Convolutional Layers-------

keras.layers.Conv1D(filters, kernel_size, strides=1, padding='valid', dilation_rate=1, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)
1D convolution layer (e.g. temporal convolution).

limited to below four arguments
model.add(Conv1D(filters=50, kernel_size=5, padding='same', activation='relu')

-------For Sequential modelling-------

https://keras.io/getting-started/sequential-model-guide/

from keras.models import Sequential
from keras.layers import Dense, Activation

model = Sequential()
model.add(Dense(32, activation='relu', input_dim=100))
model.add(Dense(1, activation='sigmoid'))
model.compile(optimizer='rmsprop',
              loss='binary_crossentropy',
              metrics=['accuracy'])

Chaged according to our model and data also removed few arguments as they were not required
Changed value for optimizer argument according to requirement



